// Implementation of the Hash Table ADT


#include <assert.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Hash.h"
#include "List.h"

typedef struct HashTabRep {
	List *lists;        // Stores the data of each element 
	int   nElements;    // # total elements in array
	int   nItems;       // # current items stored in HashTable
} HashTabRep;


////////////////////////////////////////////////////////////////////////


// converts a key into an index (from Sedgewick)
unsigned int hash(Key k, int tableSize) {
	unsigned int h = 0;
	int a = 31415, b = 27183;
	for (; *k != '\0'; k++) {
		a = a * b % (tableSize - 1);
		h = (a * h + *k) % tableSize;
	}
	return (h % tableSize);
}


HashTable HashTableNew(int N) {
    // Creates a new hash table
	HashTabRep *new = malloc(sizeof(HashTabRep));
	if (new == NULL) {
		fprintf(stderr, "error: out of memory\n");
		exit(EXIT_FAILURE);
	}

    // Creates a list to store the data of each element in table
	new->lists = malloc(N * sizeof(List));
	if (new->lists == NULL) {
		fprintf(stderr, "error: out of memory\n");
		exit(EXIT_FAILURE);
	}
	for (int i = 0; i < N; i++) {
		new->lists[i] = ListNew();
	}
	new->nslots = N;
	new->nitems = 0;
	
	return new;
}


void HashTableFree(HashTable ht) {
	for (int i = 0; i < ht->nslots; i++) {
		ListFree(ht->lists[i]);
	}
	free(ht);
}


////////////////////////////////////////////////////////////////////////


void HashTableInsert(HashTable ht, Item it) {
	int i = hash(key(it), ht->nslots);
	if (ListSearch(ht->lists[i], key(it)) == NULL) {
		ListInsert(ht->lists[i], it);
		ht->nitems++;
	}
}

void HashTableDelete(HashTable ht, Key k) {
	int h = hash(k, ht->nslots);
	ListDelete(ht->lists[h], k);
}

// get Item from HashTable using Key
Item *HashTableSearch(HashTable ht, Key k) {
	int i = hash(k, ht->nslots);
	return ListSearch(ht->lists[i], k);
}





